#!/usr/bin/python3
################################################################################
# AGENT TEST
#
# Justin Dierking
# phnomcobra@gmail.com
#
# 02/05/2021 Original construction
################################################################################

import argparse
import sys

from time import sleep

from stembot.adapter.agent import Console

parser = argparse.ArgumentParser(description='agent test suite')

parser.add_argument('-a', '--agtuuid', dest='dstuuid', action='store')

kwargs = vars(parser.parse_args())

cli = Console(kwargs['dstuuid'])

collection = cli.AGTCollection('scripts')



print("\n- Scheduled Script Test (Success) -----------------------------------")
script = collection.get_object()

script.object.update(
    {
        'enabled': True,
        'silent': False,
        'seconds': '*',
        'minutes': '*',
        'hours': '*',
        'dayofmonth': '*',
        'dayofweek': '*',
        'year': '*',
        'body': "print('This is the script test.')",
        'status': None,
        'stdout': None,
        'stderr': None
    }
)

script.set()

sleep(2)

script.load()
script.object.update({'enabled': False})
script.set()

for key in ['status', 'stdout', 'stderr']:
    print(f'{key}: {script.object[key]}'.strip())

script.destroy()




print("\n- Scheduled Script Test (Failure) -----------------------------------")
script = collection.get_object()

script.object.update(
    {
        'enabled': True,
        'silent': False,
        'seconds': '*',
        'minutes': '*',
        'hours': '*',
        'dayofmonth': '*',
        'dayofweek': '*',
        'year': '*',
        'body': "print('This is an error.'",
        'status': None,
        'stdout': None,
        'stderr': None
    }
)

script.set()

sleep(2)

script.load()
script.object.update({'enabled': False})
script.set()

for key in ['status', 'stdout', 'stderr']:
    print(f'{key}: {script.object[key]}'.strip())

script.destroy()




print("\n- Script Test -------------------------------------------------------")
status, stdout, stderr = cli.interpret(
    "print('Execute Python Ticket!')",
    return_tuple=True
)
print('status: ' + str(status))
print('stdout: ' + stdout.strip())
print('stderr: ' + stderr.strip())




print("\n- Cascading File Test -----------------------------------------------")
print('Deploying /tmp/test.dat')
cli.Cascade().file_write('/tmp/test.dat', 'testdata'.encode())
print('Removing /tmp/test.dat')
for key, value in cli.Cascade().system('rm -fv /tmp/test.dat').items():
    print(f'{key}: {value}'.strip())
    